# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eYQkaesVd23ZMBx2Td1iNmuonXuFNBrq
"""

class cube:
  def __init__(self, id, position, scale):
    self.name = "cube_"+str(id)
    self.position = position
    self.scale = scale
  def output(self):
    output = "        <include>\n"
    output += "            <name>{}</name>\n".format(str(self.name))
    output += "            <uri>model://cube</uri>\n"
    output += "            <pose>{} {} {} 0 0 0</pose>\n".format(self.position[0], self.position[1], self.scale / 2)
    output += "        </include>\n\n"
    return output

class water:
  def __init__(self, id, position, scale):
    self.name = "water_"+str(id)
    self.position = position
    self.scale = scale
  def output(self):
    output = "        <include>\n"
    output += "            <name>{}</name>\n".format(str(self.name))
    output += "            <uri>model://water</uri>\n"
    output += "            <pose>{} {} 0 0 0 0</pose>\n".format(self.position[0], self.position[1])
    output += "        </include>\n\n"
    return output
    
class food:
  def __init__(self, id, position, scale):
    self.name = "food_"+str(id)
    self.position = position
    self.scale = scale
  def output(self):
    output = "        <include>\n"
    output += "            <name>{}</name>\n".format(str(self.name))
    output += "            <uri>model://food</uri>\n"
    output += "            <pose>{} {} 0 0 0 0</pose>\n".format(self.position[0], self.position[1])
    output += "        </include>\n\n"
    return output

from PIL import Image
import numpy as np

def read_img(img_name):
    img = Image.open(img_name)
    return img


def gen_world_from_image(img_name):
    img = Image.open(img_name)
    w, h = img.size
    pixel_info = np.array(img.getdata()).reshape((w, h, 3)).transpose()
    pixel_info = np.transpose(pixel_info, axes=(0, 2, 1))
    pixel_info = np.flip(pixel_info, axis=1)

    wall_locs = np.argwhere((pixel_info[1] == 255))
    win_locs = np.argwhere(pixel_info[2] == 255)
    lose_locs = np.argwhere(pixel_info[0] == 255)
    return wall_locs, win_locs, lose_locs

x_offset = -7
y_offset = -4
scale = 0.6

walls, water, food = gen_world_from_image("t-maze.pnm")[2]

walls = [[-(w[0] + x_offset) * scale, (w[1] + y_offset) * scale] for w in walls]
water = [[-(w[0] + x_offset) * scale, (w[1] + y_offset) * scale] for w in water]
food = [[-(f[0] + x_offset) * scale, (f[1] + y_offset) * scale] for f in food]

file = ""
for i, w in enumerate(walls):
  new_cube = cube(i, w, scale)
  file += new_cube.output()
  
for i, w in enumerate(water):
  new_water = water(i, w, scale)
  file += new_cube.output()
  
for i, f in enumerate(food):
  new_food = food(i, f, scale)
  file += new_cube.output()

world = open("template.txt", "r")
code = world.read()

out = open("t-maze.world", "w")
out.write(code.replace("cube", file))

